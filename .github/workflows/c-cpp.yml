name: Build & Deploy HLSDK
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            targetos: linux
            targetarch: amd64
          - os: ubuntu-20.04
            targetos: linux
            targetarch: i386
          - os: ubuntu-20.04
            targetos: linux
            targetarch: arm64
          - os: ubuntu-20.04
            targetos: linux
            targetarch: armhf
          - os: ubuntu-20.04
            targetos: linux
            targetarch: riscv64
          - os: ubuntu-20.04
            targetos: linux
            targetarch: ppc64el
    env:
      YQ_VERSION: 4.44.6
      GH_CPU_OS: ${{ matrix.targetos }}
      GH_CPU_ARCH: ${{ matrix.targetarch }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Install dependencies
      run: bash scripts/gha/deps_${{ matrix.targetos }}.sh
    - name: Build HLSDK
      env:
        FWGS_PFX_PASSWORD: ${{ secrets.FWGS_PFX_PASSWORD }}
      run: bash scripts/gha/build_${{ matrix.targetos }}.sh
    - name: Upload HLSDK (artifacts)
      uses: actions/upload-artifact@v4
      with:
        name: artifact-${{ matrix.targetos }}-${{ matrix.targetarch }}
        path: out/*
  release:
    name: "Upload releases"
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'push' }}
    steps:
    - name: Remove old release, fetch artifacts, repackage binaries and upload new release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ github.ref_name == 'master' && 'continuous' || format('continuous-{0}', github.ref_name) }}
      run: |
        gh release delete "$RELEASE_TAG" \
          --yes \
          --cleanup-tag \
          --repo "$GITHUB_REPOSITORY" || true
        sleep 20s
        gh run download "$GITHUB_RUN_ID" \
          --dir out/ \
          --repo "$GITHUB_REPOSITORY"
        pushd out/
        echo "Found artifacts:"
        ls
        for i in $(find -mindepth 1 -maxdepth 1 -type d); do
          mv "$i"/* .
          rm -rf "$i"
        done
        echo "Repackaged artifacts:"
        ls -R
        popd
        sleep 20s
        gh release create "$RELEASE_TAG" out/* \
          --title "HLSDK Mega Continuous ${{ github.ref_name }} Build" \
          --target $GITHUB_SHA \
          --repo "$GITHUB_REPOSITORY" \
          --prerelease
